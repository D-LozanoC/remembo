generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String      @id @default(cuid())
  name          String?
  password      String?
  email         String      @unique
  emailVerified DateTime?
  imageBlob     Bytes? // Almacena la imagen original subida por el usuario
  image         String? // Almacena la URL de la imagen (ej: imagen de perfil de Google)
  accounts      Account[]
  sessions      Session[]
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  role          String      @default("user")
  Notes         Note[]
  Decks         Deck[]
  Flashcard     Flashcard[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Note {
  id      String   @id @default(uuid())
  title   String
  topic   String
  content String
  subject Subjects

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  flashcards Flashcard[]

  @@index([userId])
}

model Deck {
  id      String   @id @default(cuid())
  title   String
  topic   String
  subject Subjects

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  flashcards   Flashcard[]
  StudySession StudySession[]

  @@index([userId])
}

model Flashcard {
  id             String   @id @default(cuid())
  question       String
  isDerived      Boolean  @default(false)
  answers        String[]
  correctAnswers String[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Note   Note?   @relation(fields: [noteId], references: [id], onDelete: Cascade)
  noteId String?

  decks Deck[]

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  // SM-2
  easiness    Float    @default(2.5) // Nivel de facilidad (E-Factor)
  interval    Int      @default(0) // Intervalo actual en días
  repetitions Int      @default(0) // Veces consecutivas recordada
  nextReview  DateTime @default(now()) // Próxima fecha sugerida de repaso
  lastScore   Int      @default(0) // Último score de 0 a 5

  studySessions StudySession[]

  @@index([userId])
}

model StudySession {
  id         String      @id @default(cuid())
  deckId     String?
  deck       Deck?       @relation(fields: [deckId], references: [id], onDelete: Cascade)
  accuracy   Int         @default(0) // Precisión del repaso
  duration   Int         @default(0) // Duración del repaso en segundos
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  flashcards Flashcard[]
}

enum Subjects {
  Inteligencia_Artificial
  Ingenieria_de_Software
  Fundamentos_de_Telematica
  Programación_por_Componentes
  Arquitectura_de_Computadores
  Protocolo_de_Comunicación
  Regulación_para_Telecomunicaciones
  Electiva_Socio_Humanistica
}
