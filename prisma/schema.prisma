generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(cuid())
  name          String?
  password      String?
  email         String         @unique
  emailVerified DateTime?
  imageBlob     Bytes? // Almacena la imagen original subida por el usuario
  image         String? // Almacena la URL de la imagen (ej: imagen de perfil de Google)
  accounts      Account[]
  sessions      Session[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  role          String         @default("user")
  Notes         Note[]
  Decks         Deck[]
  Flashcard     Flashcard[]
  StudySession  StudySession[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Note {
  id      String   @id @default(uuid())
  title   String
  topic   String
  content String
  subject Subjects

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  flashcards Flashcard[]

  @@index([userId])
}

model Deck {
  id      String   @id @default(cuid())
  title   String
  topic   String
  subject Subjects

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  StudySession          StudySession[]
  DeckAlgorithmState    DeckAlgorithmState[]
  DeckFlashcard         DeckFlashcard[]
  StudySessionFlashcard StudySessionFlashcard[]

  @@index([userId])
}

model Flashcard {
  id             String   @id @default(cuid())
  question       String
  isDerived      Boolean  @default(false)
  answers        String[]
  correctAnswers String[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  Note   Note?   @relation(fields: [noteId], references: [id], onDelete: Cascade)
  noteId String?

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  DeckFlashcard         DeckFlashcard[]
  StudySessionFlashcard StudySessionFlashcard[]

  @@index([userId])
}

model StudySession {
  id String @id @default(cuid())

  deckId String?
  deck   Deck?   @relation(fields: [deckId], references: [id], onDelete: Cascade)
  userId String
  user   User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  accuracy   Int                @default(0) // Precisión del repaso
  duration   Int                @default(0) // Duración del repaso en segundos
  status     StudySessionStatus @default(En_Curso)
  nextReview DateTime           @default(now())

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  StudySessionFlashcard StudySessionFlashcard[]
}

enum StudySessionStatus {
  En_Curso
  Finalizada
  Programada
}

enum Subjects {
  Inteligencia_Artificial
  Ingenieria_de_Software
  Fundamentos_de_Telematica
  Programación_por_Componentes
  Arquitectura_de_Computadores
  Protocolo_de_Comunicación
  Regulación_para_Telecomunicaciones
  Electiva_Socio_Humanistica
}

//////////////////////
// SM-Deck 
//////////////////////

// Estado del algoritmo por cada Deck (unidad: mazo)
// Mantiene EF, interval, repetitions, nextReview, lastScore y otros parámetros.
model DeckAlgorithmState {
  deckId String @id

  easiness             Float    @default(2.5)
  interval             Int      @default(0)
  repetitions          Int      @default(0)
  nextReview           DateTime @default(now())
  lastScore            Int      @default(0)
  targetSecondsPerItem Int      @default(20)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  deck Deck @relation(fields: [deckId], references: [id], onDelete: Cascade)

  @@index([nextReview])
}

// Relación explícita entre Deck y Flashcard con metadata (priority, lastSeenAt)
// No reemplaza ni elimina la relación implícita decks[] que ya existe en Flashcard.
model DeckFlashcard {
  deckId      String
  flashcardId String

  priority   Int       @default(0)
  addedAt    DateTime  @default(now())
  lastSeenAt DateTime?

  deck      Deck      @relation(fields: [deckId], references: [id], onDelete: Cascade)
  flashcard Flashcard @relation(fields: [flashcardId], references: [id], onDelete: Cascade)

  @@id([deckId, flashcardId])
  @@index([flashcardId, priority])
  @@index([deckId, lastSeenAt])
}

// Detalle por flashcard dentro de una StudySession
// Guarda isCorrect y timeSpent (ms) por flashcard — suficiente para calcular accuracy, pace, etc.
model StudySessionFlashcard {
  studySessionId String
  flashcardId    String
  deckId         String? // contexto del mazo donde se presentó (opcional)

  isCorrect Boolean @default(false)
  timeSpent Int     @default(0) // en milisegundos

  studySession StudySession @relation(fields: [studySessionId], references: [id], onDelete: Cascade)
  flashcard    Flashcard    @relation(fields: [flashcardId], references: [id], onDelete: Cascade)
  deck         Deck?        @relation(fields: [deckId], references: [id], onDelete: Cascade)

  @@id([studySessionId, flashcardId])
  @@index([flashcardId])
}
